source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
dyn.load("hello.dll")
hello <- function(n) {
out <-.C("helloworld", as.integer(5))
print(out$n)
}
hello(5)
dyn.load("hello.dll")
hello <- function(n) {
out <-.C("helloworld", as.integer(5))
print(out$n)
}
hello(5)
dyn.unload("hello.dll")
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
dyn.load("hello.dll")
hello <- function(n) {
.C("helloworld", as.integer(5))
}
hello(5)
dyn.unload("hello.dll")
dyn.load(hello.dll)
dyn.load("hello.dll")
dyn.load("hello.dll")
hello <- function(n) {
.C("helloworld", as.integer(5))
}
hello(5)
dyn.unload("hello.dll")
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
source('D:/Rproject/SVI.LDA.HMM/R/hello.R')
dyn.load("hello.dll")
hello <- function(n) {
.C("helloworld", as.integer(5))
}
hello(5)
dyn.unload("hello.dll")
# Hello, world!
#
# This is an example function named 'hello'
# which prints 'Hello, world!'.
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Build and Reload Package:  'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
hello('Rstudio')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
SVI_LAD(X,K,n,alpha,eta,pre)
print(convolve3cpp(rnorm(5),rnorm(5)))
hello('Rstudio')
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
#SVI_LAD(X,K,n,alpha,eta,pre)
# Hello, world!
#
# This is an example function named 'hello'
# which prints 'Hello, world!'.
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Build and Reload Package:  'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
hello('Rstudio')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
SVI_LAD(X,K,n,alpha,eta,pre)
print(convolve3cpp(rnorm(5),rnorm(5)))
hello('Rstudio')
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
#SVI_LAD(X,K,n,alpha,eta,pre)
# Hello, world!
#
# This is an example function named 'hello'
# which prints 'Hello, world!'.
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Build and Reload Package:  'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
hello('Rstudio')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
SVI_LAD(X,K,n,alpha,eta,pre)
print(convolve3cpp(rnorm(5),rnorm(5)))
hello('Rstudio')
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
#SVI_LAD(X,K,n,alpha,eta,pre)
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
SVI_LAD(X,K,n,alpha,eta,pre)
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
SVI_LAD(X,K,n,alpha,eta,pre)
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
View(hello)
View(hello)
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
SVI_LAD(X,K,n,alpha,eta,pre)
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
load("D:/Rproject/SVI.LDA.HMM/.RData")
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
SVI_LAD(X,K,n,alpha,eta,pre)
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
len <- length(X)
names(X) <-as.character(1:len)
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
len <- length(X)
names(X) <-as.character(1:len)
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
len <- length(X)
names(X) <-as.character(1:len)
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
len <- length(X)
names(X) <-as.character(1:len)
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother'),c('father','dad','cat'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
View(SVI_LAD)
View(SVI_LAD)
# dyn.load("dll/hello.dll")
# vecSum <- function(vec){
#   if (!is.vector(vec))
#     stop("vec must be a vector")
#   .Call("vecSum", vec)
# }
# .Call("ab",1,5)
library(Rcpp)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
len <- length(X)
names(X) <-as.character(1:len)
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother','mother'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
len <- length(X)
names(X) <-as.character(1:len)
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
len <- length(X)
names(X) <-as.character(1:len)
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
len <- length(X)
names(X) <-as.character(1:len)
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
