mid_norm=mid;
while(norm(as.matrix(gamma[,d]-gamma1))>=pre) # stop criteria
{
gamma1=gamma[,d] # the last update of gamma
for (j in 1:length(Y)) # read each words in d-th document.
{
w[,j]=(Y[j]==Key); # the realization of multinormial(beta...)
p=a$find(Y[j]);
mid[j,]=exp(digamma(gamma[,d])+digamma(Lambda[p,])-digamma(colSums(Lambda)))
mid_norm[j,]=mid[j,]/sum(mid[j,]); # normalized
}
gamma[,d]=alpha+colSums(mid_norm); # update gamma
}
phi[[d]]=mid_norm; # update phi
lambda=eta+D*w%*%phi[[d]]; # update lambda_hat
#lambda=eta+D*w%*%mid_norm;
Lambda=(1-((i-1)*D+d)^(-1))*Lambda+((i-1)*D+d)^(-1)*lambda; # update lambda
print(Lambda);
}
}
return(list(Lambda,phi,gamma));
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
print(t)
library(hashmap)
LDA.Dictionary<-function(X)
{
#l=5 the number of passes we run.
words=unlist(X);
y=rep(0,length(words));
H=hashmap(words,y);
H1=hashmap(H$keys(),1:length(H$keys()));
# Key=H1$keys();
# Values=H1$values();
# return(list(Key,Values));
return(H1);
}
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
D=length(X);   # the number of the document.
a=LDA.Dictionary(X);
Key=a$keys();
Value=a$values(); # get the dictionary and value
V=length(Key);
#Lambda=matrix(rchisq(K*V,df=1,ncp=0),V); # random initial
Lambda=matrix(rep(0.1,K*V),V);
##choose step size as 1/t.
#top.words=matrix(rep(0,D*k),D) # initial the top.words
#top.topics=matrix(rep(0,D*k),D)# initial the top.topics
gamma=matrix(rep(0,D*K),K);    # Allocate memory
phi=list()                     # initial the phi
phi1=list(1);
for (i in 1:n)
{
for (d in 1:D)
{
gamma[,d]=1;               # initial the gamma
gamma1=rep(0,K);           # instore the last data of gamma
Y=unlist(X[d]); # get the X[d];
w=matrix(rep(0,length(Y)*V),nrow=V);
mid=matrix(rep(0,length(Y)*K),nrow=length(Y));
mid_norm=mid;
while(norm(as.matrix(gamma[,d]-gamma1))>=pre) # stop criteria
{
gamma1=gamma[,d] # the last update of gamma
for (j in 1:length(Y)) # read each words in d-th document.
{
w[,j]=(Y[j]==Key); # the realization of multinormial(beta...)
p=a$find(Y[j]);
mid[j,]=exp(digamma(gamma[,d])+digamma(Lambda[p,])-digamma(colSums(Lambda)))
mid_norm[j,]=mid[j,]/sum(mid[j,]); # normalized
}
gamma[,d]=alpha+colSums(mid_norm); # update gamma
}
phi[[d]]=mid_norm; # update phi
lambda=eta+D*w%*%phi[[d]]; # update lambda_hat
#lambda=eta+D*w%*%mid_norm;
Lambda=(1-((i-1)*D+d)^(-1))*Lambda+((i-1)*D+d)^(-1)*lambda; # update lambda
print(Lambda);
}
}
return(list(Lambda,phi,gamma));
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
print(t)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre # the stop criteria
)
{
Y <- SVI_LAD(X,K,n,alpha,eta,pre)
print(Y)
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1)
x <- c(10:1)
x
sort(sort(x ))
x <- c(10:1)
order(x)
Topic = order(x)[1:5]
Topic
a <- matrix(1:6, nrow = 2)
a
Topic <- order(rowSums(a))[1:2]
Topic
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
Y <- SVI_LAD(X,K,n,alpha,eta,pre,k)
print(Y)
}
#
X=list(c("home","mother","son","papa"),c(rep("dad",100),"dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
Y <- SVI_LAD(X,K,n,alpha,eta,pre,k)
print(Y)
}
#
X=list(c("home","mother","son","papa"),c(rep("dad",100),"dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
Y <- SVI_LAD(X,K,n,alpha,eta,pre,k)
print(Y)
}
#
X=list(c("home","mother","son","papa"),c(rep("dad",5),"dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
Y <- SVI_LAD(X,K,n,alpha,eta,pre,k)
print(Y)
}
#
X=list(c("home","mother","son","papa"),c(rep("dad",5),"dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
Y <- SVI_LAD(X,K,n,alpha,eta,pre,k)
print(Y)
}
#
X=list(c("home","mother","son","papa"),c("dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
SVI_LAD(X,K,n,alpha,eta,pre,k)
# print(Y)
}
#
X=list(c("home","mother","son","papa"),c("dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
SVI_LAD(X,K,n,alpha,eta,pre,k)
}
#
X=list(c("home","mother","son","papa"),c("dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
SVI_LAD(X,K,n,alpha,eta,pre,k)
}
#
X=list(c("home","mother","son","papa"),c("dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
SVI_LAD(X,K,n,alpha,eta,pre,k)
}
#
X=list(c("home","mother","son","papa"),c("dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
View(LDA.SVI)
View(SVI_LAD)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
SVI_LAD(X,K,n,alpha,eta,pre,k)
}
#
X=list(c("home","mother","son","papa"),c("dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
SVI_LAD(X,K,n,alpha,eta,pre,k)
}
#
X=list(c("home","mother","son","papa"),c("dad","cat","it","newbee","lgd"))
#
K=3;
K=100;
alpha=1/K;
eta=0.01;
n=10;
pre=0.1;
LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
SVI_LAD(X,K,n,alpha,eta,pre,k)
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
SVI_LAD(X,K,n,alpha,eta,pre,k)
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
library(Rcpp)
library(RcppArmadillo)
sourceCpp(file='src/LDA.cpp')
LDA.SVI<-function(X, # the Input data
K, # the number of the topics
n, # the number of the passes
alpha, # the parameter of theta
eta, # the parameter of beta
pre, # the stop criteria
k# the number of top words and topics
)
{
SVI_LAD(X,K,n,alpha,eta,pre,k)
}
X=list(c('home','mother','mother','house'),c('father','dad','cat','dad'))
K=2;
alpha=1/K;
eta=0.01;
n=2;
pre=0.1;
t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.1,2)
