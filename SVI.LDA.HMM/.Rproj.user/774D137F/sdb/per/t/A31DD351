{
    "collab_server" : "",
    "contents" : "// [[Rcpp::depends(RcppArmadillo)]]\n#include<RcppArmadillo.h>\n#include <string>\n#include <map>\n#include<Rinternals.h>\n#include<math.h>\nusing namespace std;\nusing namespace Rcpp;\nusing namespace arma;\n// [[Rcpp::export]]\nSEXP SVI_HMM(  Rcpp:: List &Data_sequence,\n               SEXP sub_lengthh,\n               SEXP  KK,\n               SEXP W_AA,\n               SEXP uu,\n               SEXP kk,\n               Rcpp:: List &sigma,\n               SEXP vv,\n               SEXP U_AA,\n               SEXP U_phi11,\n               SEXP U_phi22,\n               Rcpp:: List &U_phi3,\n               SEXP U_phi44,\n               SEXP Dimm,\n               SEXP Passs,\n               SEXP pree\n\n)\n{\n\n  int sub_length=Rcpp::as<int>(sub_lengthh);\n  int Dim=Rcpp::as<int>(Dimm);\n  int K=Rcpp::as<int>(KK);\n  Rcpp:: NumericMatrix W_A =  Rcpp::as<Rcpp::NumericMatrix>(W_AA) ;\n  Rcpp:: NumericMatrix  u  =  Rcpp::as<Rcpp::NumericMatrix>(uu) ;\n  Rcpp:: NumericVector  k  =  Rcpp::as<Rcpp::NumericVector>(kk) ;\n  Rcpp:: NumericVector  v  =  Rcpp::as<Rcpp::NumericVector>(vv) ;\n  Rcpp:: NumericVector  U_A =  Rcpp::as<Rcpp::NumericVector>(U_AA) ;\n  Rcpp:: NumericMatrix  U_phi1 =  Rcpp::as<Rcpp::NumericMatrix>(U_phi11) ;\n  Rcpp:: NumericVector  U_phi2 =  Rcpp::as<Rcpp::NumericVector>(U_phi22) ;\n  Rcpp:: NumericVector  U_phi4 =  Rcpp::as<Rcpp::NumericVector>(U_phi44) ;\n  int Pass=Rcpp::as<int>(Passs);\n  double pre =Rcpp::as<double>(pree);\n  int T = Data_sequence.size();\n  Rcpp::NumericMatrix P_(T,K);\n  Rcpp::NumericMatrix q_x(T,K);\n  Rcpp::NumericMatrix alpha_forward(T,K);\n  Rcpp::NumericMatrix beta_backward(T,K);\n  Rcpp::List q_transition(T);\n  Rcpp::NumericMatrix A_(K,K);\n  int i =0;\n  arma::mat W_A_new = as<arma::mat>(W_A);\n  arma::mat W_A_old(K,K);\n  while(norm(W_A_new-W_A_old,\"fro\")/norm(W_A_new,\"fro\")>=pre&&i<Pass)\n  {\n    W_A_old = W_A_new;\n    for(int j=0;j<(T-sub_length+1);j++)\n    {\n      for( int i_local=0;i_local<K;i_local++)\n      {\n        A_(_,i_local) = exp(digamma(W_A(_,i_local))-digamma(rowSums(W_A)));\n      }\n      Rcpp:: NumericVector trick_sum(K);\n      for(int t=j;t<=(j+sub_length-1);t++)\n      {\n        for(int m=0;m<K;m++)\n        {\n          double pi = 3.141593;\n          Rcpp:: NumericVector  Dim_vec(Dim);\n          for(int i_local =0;i_local<Dim;i_local++)\n          {\n            Dim_vec[i_local]=0.5*(v[m]+1-(i_local+1));\n          }\n          arma::mat sigma_m = as<arma::mat>(sigma[m]);\n          Rcpp:: NumericVector Data_t = Rcpp::as<Rcpp::NumericVector>(Data_sequence[t]) ;\n          Rcpp:: NumericVector Data_sequence_t_u_m_temp = Data_t - u(_,m);\n          arma::vec Data_sequence_t_u_m = as<arma::vec>(Data_sequence_t_u_m_temp);\n          trick_sum[m]=(-0.5*Dim*log(pi)+0.5*(sum(digamma(Dim_vec)))\n                         -0.5*log(det(sigma_m))-0.5*Dim/k[m]\n                         -0.5*v[m]*sum(trans(Data_sequence_t_u_m)*inv(sigma_m)*(Data_sequence_t_u_m)));\n        }\n        double shift_center = max(trick_sum);\n        for(int m=0;m<K;m++)\n        {\n           P_(t,m)=exp(trick_sum[m]-shift_center-log(sum(exp(trick_sum-shift_center))));\n        }\n\n      }\n         arma::mat Eq_A(K,K);\n         for(int i_local=0;i_local<K;i_local++)\n         {\n           double my_sum = sum(W_A(i_local,_));\n           for(int j_local=0;j_local<K;j_local++)\n           {\n             Eq_A(i_local,j_local)=W_A(i_local,j_local)/my_sum;\n           }\n         }\n         arma::cx_vec eigval;\n         arma::cx_mat eigvec;\n         eig_gen(eigval,eigvec,Eq_A);\n         Rcpp:: NumericVector pi_hat= Rcpp::wrap(real(eigvec.col(0))) ;\n         for(int tag = j ;tag<=(j+sub_length-1);tag++)\n         {\n           if(tag==j)\n           {\n             for(int state=0; state<K;state++)\n             {\n               alpha_forward(tag,state)=sum(pi_hat*A_(_,state))*P_(tag,state);\n             }\n             alpha_forward(tag,_)=alpha_forward(tag,_)/sum(alpha_forward(tag,_));\n           }\n           else\n           {\n             for(int state=0;state<K;state++)\n             {\n               alpha_forward(tag,state)=sum(alpha_forward(tag-1,_)*A_(_,state))*P_(tag,state);\n             }\n             alpha_forward(tag,_)=alpha_forward(tag,_)/sum(alpha_forward(tag,_));\n           }\n         }\n         for(int tag=(j+sub_length-1);tag>=j;tag--)\n         {\n           if(tag==(j+sub_length-1))\n           {\n             for(int state=0;state<K;state++)\n             {\n               beta_backward(tag,state)=1;\n             }\n           }\n           else\n           {\n             for(int state=0;state<K;state++)\n             {\n               beta_backward(tag,state)= sum(A_(state,_)*beta_backward(tag+1,_)*P_(tag+1,_));\n             }\n             beta_backward(tag,_)= beta_backward(tag,_)/sum(beta_backward(tag,_));\n           }\n         }\n         for(int tag=j;tag<=(j+sub_length-1);tag++)\n         {\n           q_x(tag,_) = alpha_forward(tag,_)*beta_backward(tag,_);\n           q_x(tag,_) = q_x(tag,_)/sum(q_x(tag,_));\n         }\n         for(int tag=j;tag<=(j+sub_length-1);tag++)\n         {\n           if(tag==j)\n           {\n             Rcpp::NumericMatrix temp_matrix(K,K);\n             for(int j_local=0;j_local<K;j_local++)\n             {\n               for(int k_local=0;k_local<K;k_local++)\n               {\n                 temp_matrix(j_local,k_local)=pi_hat[j_local]*A_(j_local,k_local)*P_(tag,k_local)*beta_backward(tag,k_local);\n               }\n             }\n             temp_matrix=temp_matrix/sum(temp_matrix);\n             q_transition(tag)=temp_matrix;\n           }\n           else\n           {\n             Rcpp::NumericMatrix temp_matrix(K,K);\n             for(int j_local=0;j_local<K;j_local++)\n             {\n               for(int k_local=0;k_local<K;k_local++)\n               {\n                 temp_matrix(j_local,k_local)=alpha_forward(tag-1,j_local)*A_(j_local,k_local)*P_(tag,k_local)*beta_backward(tag,k_local);\n               }\n             }\n             temp_matrix=temp_matrix/sum(temp_matrix);\n             q_transition(tag)=temp_matrix;\n           }\n         }\n         arma::mat q_tran_sum(K,K);\n         q_tran_sum.fill(0);\n         for(int tag=(j+1);tag<=(j+sub_length-1);tag++)\n         {\n           arma::mat q_transition_tag = as<arma::mat>(q_transition[tag]);\n           q_tran_sum=q_tran_sum+q_transition_tag;\n         }\n         Rcpp:: NumericMatrix q_x_sum1(Dim,K);\n         q_x_sum1.fill(0);\n         for(int k_local=0;k_local<K;k_local++)\n         {\n           for(int tag=j;tag<=(j+sub_length-1);tag++)\n           {\n             Rcpp:: NumericVector Data_t = Rcpp::as<Rcpp::NumericVector>(Data_sequence[tag]) ;\n             q_x_sum1(_,k_local)=q_x_sum1(_,k_local)+q_x(tag,k_local)*Data_t;\n           }\n         }\n         Rcpp:: NumericVector q_x_sum2(K) ;\n         for(int tag=j;tag<=(j+sub_length-1);tag++)\n         {\n           q_x_sum2 = q_x_sum2+q_x(tag,_);\n         }\n         Rcpp:: NumericVector q_x_sum4 = q_x_sum2;\n         Rcpp::List q_x_sum3(K);\n         for(int k_local=0;k_local<K;k_local++)\n         {\n           arma::mat temp_matrix(Dim,Dim);\n           temp_matrix.fill(0);\n           for(int tag=j;tag<=(j+sub_length-1);tag++)\n           {\n             Rcpp:: NumericVector Data_t = Rcpp::as<Rcpp::NumericVector>(Data_sequence[tag]) ;\n             arma::vec Data_sequence_t =  as<arma::vec>(Data_t);\n             temp_matrix = temp_matrix+q_x(tag,k_local)*Data_sequence_t*trans(Data_sequence_t);\n           }\n           q_x_sum3(k_local) = Rcpp::wrap(temp_matrix) ;\n         }\n         // return Rcpp::List::create(q_tran_sum,q_x_sum1,q_x_sum2,q_x_sum3,q_x_sum4);\n         // return Rcpp::List::create(W_A,U_A,u,U_phi1,k,U_phi2,sigma,U_phi3,v,U_phi4);\n         arma::mat W_A_temp = as<arma::mat>(W_A);\n         arma::mat U_A_temp = as<arma::mat>(U_A);\n         W_A_temp = (1-(1.0/(i*(T-sub_length+1)+j+1)))*W_A_temp+(1.0/(i*(T-sub_length+1)+j+1))*(((T-sub_length+1.0)/(sub_length-1))*q_tran_sum+U_A_temp);\n         W_A= Rcpp::wrap(W_A_temp);\n         arma::mat u_temp = as<arma::mat>(u);\n         arma::mat q_x_sum_temp1 = as<arma::mat>(q_x_sum1);\n         arma::mat u_phi_te = as<arma::mat>(U_phi1);\n         u_temp = (1-(1.0/(i*(T-sub_length+1)+j+1)))*u_temp+(1.0/(i*(T-sub_length+1)+j+1))*((T-sub_length+1.0)/sub_length*q_x_sum_temp1+u_phi_te);\n         u = Rcpp::wrap(u_temp);\n         k = (1-(1.0/(i*(T-sub_length+1)+j+1)))*k+(1.0/(i*(T-sub_length+1)+j+1))*((T-sub_length+1.0)/sub_length*q_x_sum2+U_phi2);\n         for(int i_local=0;i_local<K;i_local++)\n         {\n           Rcpp:: NumericMatrix sigma_i = Rcpp::as<Rcpp::NumericMatrix>(sigma[i_local]) ;\n           arma::mat sigma_i_temp =  as<arma::mat>(sigma_i);\n           Rcpp:: NumericMatrix q_x_sum_temp3 = Rcpp::as<Rcpp::NumericMatrix>(q_x_sum3[i_local]) ;\n           arma::mat q_x_sum_i =  as<arma::mat>(q_x_sum_temp3);\n           Rcpp:: NumericMatrix U_phi_temp3 = Rcpp::as<Rcpp::NumericMatrix>(U_phi3[i_local]) ;\n           arma::mat U_phi_i =  as<arma::mat>(U_phi_temp3);\n           sigma_i_temp=(1-(1.0/(i*(T-sub_length+1)+j+1)))*sigma_i_temp+(1.0/(i*(T-sub_length+1)+j+1))*((T-sub_length+1.0)/sub_length*q_x_sum_i+U_phi_i);\n           sigma[i_local] = Rcpp::wrap(sigma_i_temp);\n         }\n         v = (1-(1.0/(i*(T-sub_length+1)+j+1)))*v+(1.0/(i*(T-sub_length+1)+j+1))*((T-sub_length+1.0)/sub_length*q_x_sum4+U_phi4);\n       }\n\n       W_A_new = as<arma::mat>(W_A);\n       i++;\n     }\n     return Rcpp::List::create(W_A,u,k,sigma,v);\n}\n/*** R\n*/\n",
    "created" : 1503376404488.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "752417232",
    "id" : "A31DD351",
    "lastKnownWriteTime" : 1503426327,
    "last_content_update" : -2147483648,
    "path" : "D:/Rproject/SVI.LDA.HMM/src/HMM.cpp",
    "project_path" : "src/HMM.cpp",
    "properties" : {
        "source_window_id" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}