{
    "collab_server" : "",
    "contents" : "# LDA.SVI<-function(X, # the Input data\n#                   K, # the number of the topics\n#                   n, # the number of the passes\n#                   alpha, # the parameter of theta\n#                   eta, # the parameter of beta\n#                   pre, # the stop criteria\n#                   topic_length# the number of top words and topics\n#\n# )\n# {\n#        library(Rcpp)\n#        library(RcppArmadillo)\n#        sourceCpp(file='src/LDA.cpp')\n#        t=  SVI_LDA(X,K,n,alpha,eta,pre,topic_length)\n#        names(t)=c(\"Lan\",\"LSS\",\"LL\",\"SSS\",\"SSSSSS\")\n#        return(t)\n# }\n#\n# Tokenize<-function(Data_set, # the Input original data, which is a list data type\n#                    Language = \"en\"# the language type you want to produce, defaut language is en\n#                    )\n# {\n#      library(tokenizers);\n#      tokenized_data <-tokenize_words(Data_set, stopwords = stopwords(Language));\n#      return(tokenized_data);\n# }\n# Stemming <- function(Tokenized_data)\n# {\n#   library(tokenizers);\n#    Document_num = length(Tokenized_data);\n#    Stem_data <- list(Document_num);\n#    for( i in 1:length(Tokenized_data))\n#    {\n#       Stem_data[[i]]=wordStem(unlist(Tokenized_data[i]));\n#    }\n#    return (Stem_data);\n# }\n#\n#  X=list(c('home','mother','mother','house','mother',rep(\"cat\",3)),c('father','dad','cat','dad','cat','cat','cat','cat','cat','cat'))\n# K=3;\n# alpha=1/K;\n# eta=0.01;\n# n=100;\n# pre=0.1;\n# t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.01,topic_length= 3)\n# doc_a = \"Brocolli is good to eat. My brother likes to eat good brocolli, but not my mother.\"\n# doc_b = \"My mother spends a lot of time driving my brother around to baseball practice.\"\n# doc_c = \"Some health experts suggest that driving may cause increased tension and blood pressure.\"\n# doc_d = \"I often feel pressure to perform well at school, but my mother never seems to drive my brother to do better.\"\n# doc_e = \"Health professionals say that brocolli is good for your health.\"\n# data <- list(doc_a,doc_b,doc_c,doc_d,doc_e)\n\nForward <- function( observed_data,#Observed data\n                     pi_hat,      # initial distribution\n                     A_, # transition matrix\n                     P_,\n                     s_begin,\n                     sublength\n\n)\n{\n\n\n}\n\n\nSVI.HMM <- function( Data_sequence, # Observed data\n                     sub_length =2, # subchain length\n                     K,#Hidden_state_number\n                     alpha, # initial w_A parameter\n                     u0, # initial W_phi\n                     k0,\n                     sigma0,\n                     v0,\n                     U_A, # Hyperparameter\n                     U_phi1, # Hyperparameter A\n                     U_phi2,\n                     U_phi3,\n                     U_phi4 ,\n                     Pre, # stop cre\n                     Pass\n)\n{\n   Dim=length(Data_sequence[[1]])# data_dimention\n   u = matrix(rep(0,Dim*K),Dim) ;\n   k = rep(k0,K);\n   v = rep(v0,K);\n   for( i in 1:K)\n   {\n     u[,i]=u0;\n   }\n   sigma = list(K)\n   for(i in 1:K)\n   {\n     sigma[[i]]= sigma0;\n   }\n   T = length(Data_sequence)\n   W_A = matrix(rep(alpha,K*K),K);\n   P_ = matrix(rep(1/K,T*K),T);\n   q_x = matrix(rep(1/K,T*K),T);\n   alpha_forward=matrix(rep(1/K,T*K),T);\n   beta_backward= matrix(rep(1/K,T*K),T);\n   q_transition = array(rep(0,T*K*K),c(T,K,K)) # index transition matrix according to beta_index\n   for(i in 1:Pass )\n   {\n     for(j in 1:(T-sub_length+1))\n     {\n       A_ = exp(digamma(W_A)-digamma(rowSums(W_A)));#compute A_ to use forward_backward algorithm\n       for(m in 1:K)\n       {\n         for(t in j:(j+sub_length-1))\n         {\n             P_[t,m]= exp(-0.5*logb(2*pi)-0.5*(sum(digamma(0.5*(v[m]+1-1:Dim))))\n                          +Dim*logb(2)-logb(det(sigma[[m]]))-0.5*Dim/k[m]\n                          -0.5*v[m]*t(Data_sequence[[t]]-u[,m])%*%solve(sigma[[m]])%*%(Data_sequence[[t]]-u[,m]));\n         }\n       }\n       Eq_A = W_A/rowSums(W_A)#Get the expectation of A for q(A)\n       eigen_value= eigen(Eq_A)\n       pi_hat = eigen_value$vectors[,1]\n       for(tag in j:(j+sub_length-1))\n       {\n           if(tag==j)\n           {\n             for(state in 1:K)\n             {\n               alpha_forward[tag,state]=crossprod(pi_hat,A_[,state])*P_[tag,state]\n             }\n           }\n           else\n           {\n             for(state in 1:K)\n             {\n               alpha_forward[tag,state]=sum(alpha_forward[tag-1,]*A_[,state])*P_[tag,state]\n             }\n\n           }\n       }\n       for(tag in (j+sub_length-1):j)\n       {\n            if(tag==j+sub_length-1)\n            {\n              beta_backward [tag,]=1\n            }\n            else\n            {\n              for(state in 1:K)\n              {\n                beta_backward[tag,state]=sum(A_[state,]*beta_backward[tag+1,]*P_[tag+1,])\n              }\n            }\n       }\n       beta_original = rep(0,K)\n       for(state in 1:K)\n       {\n         beta_original[state]=sum(A_[state,]*beta_backward[j,]*P_[j,])\n       }\n       for(tag in j:(j+sub_length-1))\n       {\n         q_x[tag,]=alpha_forward[tag,]*beta_backward[tag,]\n         q_x[tag,]= q_x[tag,]/sum(q_x[tag,])\n       }\n       for(tag in j:(j+sub_length-1))\n       {\n         if(tag==j)\n         {\n           for(j_local in 1:K)\n           {\n             for(k_local in 1:K)\n             {\n               q_transition[tag,j_local,k_local]=pi_hat[j_local]*A_\n             }\n           }\n\n         }\n       }\n\n\n       print(A_)\n       print(P_)\n       print(pi_hat)\n       print(alpha_forward)\n       print(beta_backward)\n       print(beta_original)\n     }\n\n   }\n\n}\ndata <-list(c(1:3),c(3:1),c(1:3),c(3:1),c(3:1),c(3:1))\nK=2\nDim=3\nalpha=2\nu0 = rep(2,3)\nk0=1\nv0=6\nsigma0 = diag(rep(1,3))\nU_A = 2\nU_phi1 = k0*u0\nU_phi2 = k0\nU_phi3 = sigma0+k0*u0%*%t(u0)\nU_phi4 = v0+2+3\nresult= SVI.HMM(data,sub_length = 6,K=2,alpha, u0, k0, sigma0, v0, U_A, U_phi1,U_phi2, U_phi3, U_phi4, Pre=0.2,Pass=1)\n\n\n\n\n\n",
    "created" : 1502390310955.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1850845491",
    "id" : "810AA8D1",
    "lastKnownWriteTime" : 1502849860,
    "last_content_update" : -2147483648,
    "path" : "D:/Rproject/SVI.LDA.HMM/R/SVI_LDA.R",
    "project_path" : "R/SVI_LDA.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}