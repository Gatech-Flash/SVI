{
    "collab_server" : "",
    "contents" : "# LDA.SVI<-function(X, # the Input data\n#                   K, # the number of the topics\n#                   n, # the number of the passes\n#                   alpha, # the parameter of theta\n#                   eta, # the parameter of beta\n#                   pre, # the stop criteria\n#                   topic_length# the number of top words and topics\n#\n# )\n# {\n#        library(Rcpp)\n#        library(RcppArmadillo)\n#        sourceCpp(file='src/LDA.cpp')\n#        t=  SVI_LDA(X,K,n,alpha,eta,pre,topic_length)\n#        names(t)=c(\"Lan\",\"LSS\",\"LL\",\"SSS\",\"SSSSSS\")\n#        return(t)\n# }\n#\n# Tokenize<-function(Data_set, # the Input original data, which is a list data type\n#                    Language = \"en\"# the language type you want to produce, defaut language is en\n#                    )\n# {\n#      library(tokenizers);\n#      tokenized_data <-tokenize_words(Data_set, stopwords = stopwords(Language));\n#      return(tokenized_data);\n# }\n# Stemming <- function(Tokenized_data)\n# {\n#   library(tokenizers);\n#    Document_num = length(Tokenized_data);\n#    Stem_data <- list(Document_num);\n#    for( i in 1:length(Tokenized_data))\n#    {\n#       Stem_data[[i]]=wordStem(unlist(Tokenized_data[i]));\n#    }\n#    return (Stem_data);\n# }\n#\n#  X=list(c('home','mother','mother','house','mother',rep(\"cat\",3)),c('father','dad','cat','dad','cat','cat','cat','cat','cat','cat'))\n# K=3;\n# alpha=1/K;\n# eta=0.01;\n# n=100;\n# pre=0.1;\n# t=LDA.SVI(X,K,n,alpha=1/K,eta=0.01,pre=0.01,topic_length= 3)\n# doc_a = \"Brocolli is good to eat. My brother likes to eat good brocolli, but not my mother.\"\n# doc_b = \"My mother spends a lot of time driving my brother around to baseball practice.\"\n# doc_c = \"Some health experts suggest that driving may cause increased tension and blood pressure.\"\n# doc_d = \"I often feel pressure to perform well at school, but my mother never seems to drive my brother to do better.\"\n# doc_e = \"Health professionals say that brocolli is good for your health.\"\n# data <- list(doc_a,doc_b,doc_c,doc_d,doc_e)\nSVI.HMM <- function( Data_sequence, # Observed data\n                     sub_length =2, # subchain length\n                     K,             #Hidden_state_number\n                     alpha,         # initial parameter,which controls transition matrix\n                     u0,            # initial mean value\n                     k0,            # initial parameter, which controls Gassuian Distribution\n                     sigma0,        # initial covariance matrix\n                     v0,             # initial parameter, which controls Gassuian Distribution\n                     U_A,    # Hyperparameter\n                     U_phi1, # Hyperparameter\n                     U_phi2, # Hyperperameter the same notation with the paper\n                     U_phi3, # Hyperperameter the same notation with the paper\n                     U_phi4, # Hyperperameter the same notation with the paper\n                     Pass    # toal pass\n)\n{\n   Dim=length(Data_sequence[[1]])  # data_dimention\n   u = matrix(rep(0,Dim*K),Dim) ;  # claim mean value of K components.\n   k = rep(k0,K);                  # claim k, which controls Gussuian Distribution\n   v = rep(v0,K);                  # claim v, which controls Gussuian Distribution\n   for( i in 1:K)\n   {\n     u[,i]=u0;                    # initial every component with the same mean value\n   }\n   sigma = list(K)\n   for(i in 1:K)\n   {\n     sigma[[i]]= sigma0;         # initial every component with the same covariance\n   }\n   T = length(Data_sequence)    # data squence length T\n   W_A = matrix(rep(alpha,K*K),K); # parameter of Diri distribution, controlling A, which is a trnasition matrix\n   P_ = matrix(rep(1/K,T*K),T);   #  Have the same meaning with paper in S10\n   q_x = matrix(rep(1/K,T*K),T);  # transition matrix, In S14 of the paper\n   alpha_forward=matrix(rep(1/K,T*K),T); # the same meaning with that in forward and backward algorithm\n   beta_backward= matrix(rep(1/K,T*K),T);\n   q_transition = array(rep(0,T*K*K),c(T,K,K)) # Equal to S15 in the paper\n   for(i in 1:Pass )\n   {\n     for(j in 1:(T-sub_length+1))  # sample each subchain\n     {\n       A_ = exp(digamma(W_A)-digamma(rowSums(W_A)));# the same with S11\n       for(m in 1:K)\n       {\n         for(t in j:(j+sub_length-1))\n         {\n             # this formulate is given by you and please check it again to promise its accuracy\n             P_[t,m]= exp(-0.5*logb(2*pi)-0.5*(sum(digamma(0.5*(v[m]+1-1:Dim))))+Dim*logb(2)-logb(det(sigma[[m]]))-0.5*Dim/k[m]-0.5*v[m]*t(Data_sequence[[t]]-u[,m])%*%solve(sigma[[m]])%*%(Data_sequence[[t]]-u[,m]));\n         }\n       }\n       Eq_A = W_A/rowSums(W_A)#Get the expectation of A with q(A) density function\n       eigen_value= eigen(Eq_A)\n       pi_hat = eigen_value$vectors[,1] # corresponding to biggest eigen_value, initiate original distribution in forward algorithm\n       for(tag in j:(j+sub_length-1))  # tag means time\n       {\n           if(tag==j)\n           {\n             for(state in 1:K)\n             {\n               alpha_forward[tag,state]=crossprod(pi_hat,A_[,state])*P_[tag,state] # S12 in the paper\n             }\n           }\n           else\n           {\n             for(state in 1:K)\n             {\n               alpha_forward[tag,state]=sum(alpha_forward[tag-1,]*A_[,state])*P_[tag,state]\n               # recursion\n             }\n\n           }\n       }\n       # the following means forward algorithm\n       for(tag in (j+sub_length-1):j)\n       {\n            if(tag==j+sub_length-1)\n            {\n              beta_backward [tag,]=1 # initiate\n            }\n            else\n            {\n              for(state in 1:K)\n              {\n                beta_backward[tag,state]=sum(A_[state,]*beta_backward[tag+1,]*P_[tag+1,]) #S13 ,but I think paper is wrong,and please check again\n              }\n            }\n       }\n       beta_original = rep(0,K) # this corresponds to beta_0, even it is no use for following caculation\n       for(state in 1:K)\n       {\n         beta_original[state]=sum(A_[state,]*beta_backward[j,]*P_[j,])\n       }\n       for(tag in j:(j+sub_length-1))  # S14 in this paper, we only need time from 1, that is from j in subchain situation.\n        {                              #Please check my idea accuracy, I think we don't need calculate t=0\n         q_x[tag,]=alpha_forward[tag,]*beta_backward[tag,]\n         q_x[tag,]= q_x[tag,]/sum(q_x[tag,]) # normalize\n       }\n       for(tag in j:(j+sub_length-1))\n       {\n         if(tag==j) # we need pi_hat to calculate S15 in the first iteration\n         {\n           for(j_local in 1:K)\n           {\n             for(k_local in 1:K)\n             { #q_transition according to index of Xt. And S15 is wrong in my opinion. I substitute P,A with P_,A_. Check please\n               q_transition[tag,j_local,k_local]=pi_hat[j_local]*A_[j_local,k_local]*P_[tag,k_local]*beta_backward[tag,k_local];\n             }\n           }\n           q_transition[tag,,]=q_transition[tag,,]/sum(q_transition[tag,,])\n         }\n         else\n         {\n           for(j_local in 1:K)\n           {\n             for(k_local in 1:K)\n             {\n               q_transition[tag,j_local,k_local]=alpha_forward[tag-1,j_local]*A_[j_local,k_local]*P_[tag,k_local]*beta_backward[tag,k_local];\n             }\n           }\n           q_transition[tag,,]=q_transition[tag,,]/sum(q_transition[tag,,]) # normalize\n         }\n       }\n       q_tran_sum =  matrix(rep(0,K*K),K); #To calculate the first sum in S8 to update global phi_A\n       for(tag in (j+1):(j+sub_length-1))\n       {\n              q_tran_sum=q_tran_sum+q_transition[tag,,];\n       }\n       q_x_sum1 = matrix(rep(0,K*Dim),Dim)#To calculate the second sum in S8, and paper is wrong in notation\n        for(k_local in 1:K)\n         {\n           for(tag in j:(j+sub_length-1))\n           {\n             q_x_sum1[,k_local]=q_x_sum1[,k_local]+q_x[tag,k_local]*Data_sequence[[tag]]\n           }\n         }\n       q_x_sum2 = rep(0,K);\n       for(tag in j:(j+sub_length-1)) #To calculate the third sum in S8\n       {\n          q_x_sum2=q_x_sum2+q_x[tag,]\n       }\n       q_x_sum4 = q_x_sum2\n       q_x_sum3 = array(rep(0,K*Dim*Dim),c(K,Dim,Dim))\n       for(k_local in 1:K) # To calculate the fourth sum in S8\n       {\n         for(tag in j:(j+sub_length-1))\n         {\n           q_x_sum3[k_local,,]=q_x_sum3[k_local,,]+q_x[tag,k_local]*Data_sequence[[tag]]%*%t(Data_sequence[[tag]])\n         }\n       }\n       # 调和数列\n       W_A = ((1-((i-1)*(T-sub_length+1)+j)^(-1))*W_A\n       +((i-1)*(T-sub_length+1)+j)^(-1)*(((T-sub_length+1)/(sub_length-1))*q_tran_sum+U_A))\n       u = (1-((i-1)*(T-sub_length+1)+j)^(-1))*u+((i-1)*(T-sub_length+1)+j)^(-1)*((T-sub_length+1)/sub_length*q_x_sum1+U_phi1)\n       k = (1-((i-1)*(T-sub_length+1)+j)^(-1))*k+((i-1)*(T-sub_length+1)+j)^(-1)*((T-sub_length+1)/sub_length*q_x_sum2+U_phi2)\n       for(i_local in 1:K)\n       {\n            sigma[[i_local]]=(1-((i-1)*(T-sub_length+1)+j)^(-1))*sigma[[i_local]]+((i-1)*(T-sub_length+1)+j)^(-1)*((T-sub_length+1)/sub_length*q_x_sum3[i_local,,]+U_phi3)\n       }\n       v = (1-((i-1)*(T-sub_length+1)+j)^(-1))*v+((i-1)*(T-sub_length+1)+j)^(-1)*((T-sub_length+1)/sub_length*q_x_sum4+U_phi4)\n        print(W_A)\n       # print(A_)\n       # print(P_)\n       # print(pi_hat)\n       # print(alpha_forward)\n       # print(beta_backward)\n       # print(beta_original)\n       # print(q_x)\n       # print(q_transition)\n       print(u)\n       print(sigma)\n     }\n   }\n}\ndata <-list(c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1),c(3:1))\nK=2 # Gassiuan Component Number\nalpha=1/K #\nu0 = rep(2,3) # initial mean value\nk0=1          # initial parameter\nv0=6           # initial parameter\nsigma0 = diag(rep(1,3)) # initial covariance with identity matrix\nU_A = 1/K     # Hyperperameter the same notation with the paper\nU_phi1 = 2*k0*u0 # Hyperperameter the same notation with the paper\nU_phi2 = 2*k0    # Hyperperameter the same notation with the paper\nU_phi3 = sigma0+2*k0*u0%*%t(u0) # Hyperperameter the same notation with the paper\nU_phi4 = v0+2+3  # Hyperperameter the same notation with the paper\nsub_length =18   # sample chain length\nSVI.HMM(data,sub_length = 18,K=2,alpha, u0, k0, sigma0, v0, U_A, U_phi1,U_phi2, U_phi3, U_phi4, Pass=2)\n",
    "created" : 1502390310955.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4153908759",
    "id" : "810AA8D1",
    "lastKnownWriteTime" : 1502982935,
    "last_content_update" : -2147483648,
    "path" : "D:/Rproject/SVI.LDA.HMM/R/SVI_LDA.R",
    "project_path" : "R/SVI_LDA.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}