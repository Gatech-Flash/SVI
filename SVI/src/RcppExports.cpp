// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// SVI_HMM
SEXP SVI_HMM(Rcpp:: List& Data_sequence, SEXP sub_lengthh, SEXP KK, SEXP W_AA, SEXP uu, SEXP kk, Rcpp:: List& sigma, SEXP vv, SEXP U_AA, SEXP U_phi11, SEXP U_phi22, Rcpp:: List& U_phi3, SEXP U_phi44, SEXP Dimm, SEXP Passs, SEXP pree);
RcppExport SEXP _SVI_SVI_HMM(SEXP Data_sequenceSEXP, SEXP sub_lengthhSEXP, SEXP KKSEXP, SEXP W_AASEXP, SEXP uuSEXP, SEXP kkSEXP, SEXP sigmaSEXP, SEXP vvSEXP, SEXP U_AASEXP, SEXP U_phi11SEXP, SEXP U_phi22SEXP, SEXP U_phi3SEXP, SEXP U_phi44SEXP, SEXP DimmSEXP, SEXP PasssSEXP, SEXP preeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp:: List& >::type Data_sequence(Data_sequenceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sub_lengthh(sub_lengthhSEXP);
    Rcpp::traits::input_parameter< SEXP >::type KK(KKSEXP);
    Rcpp::traits::input_parameter< SEXP >::type W_AA(W_AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type uu(uuSEXP);
    Rcpp::traits::input_parameter< SEXP >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< Rcpp:: List& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vv(vvSEXP);
    Rcpp::traits::input_parameter< SEXP >::type U_AA(U_AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type U_phi11(U_phi11SEXP);
    Rcpp::traits::input_parameter< SEXP >::type U_phi22(U_phi22SEXP);
    Rcpp::traits::input_parameter< Rcpp:: List& >::type U_phi3(U_phi3SEXP);
    Rcpp::traits::input_parameter< SEXP >::type U_phi44(U_phi44SEXP);
    Rcpp::traits::input_parameter< SEXP >::type Dimm(DimmSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Passs(PasssSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pree(preeSEXP);
    rcpp_result_gen = Rcpp::wrap(SVI_HMM(Data_sequence, sub_lengthh, KK, W_AA, uu, kk, sigma, vv, U_AA, U_phi11, U_phi22, U_phi3, U_phi44, Dimm, Passs, pree));
    return rcpp_result_gen;
END_RCPP
}
// SVI_LDA
SEXP SVI_LDA(Rcpp:: List& X, SEXP KK, SEXP nn, SEXP alphaa, SEXP etaa, SEXP pree, SEXP word_lengthh);
RcppExport SEXP _SVI_SVI_LDA(SEXP XSEXP, SEXP KKSEXP, SEXP nnSEXP, SEXP alphaaSEXP, SEXP etaaSEXP, SEXP preeSEXP, SEXP word_lengthhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp:: List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type KK(KKSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alphaa(alphaaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type etaa(etaaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pree(preeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type word_lengthh(word_lengthhSEXP);
    rcpp_result_gen = Rcpp::wrap(SVI_LDA(X, KK, nn, alphaa, etaa, pree, word_lengthh));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _SVI_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _SVI_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _SVI_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _SVI_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SVI_SVI_HMM", (DL_FUNC) &_SVI_SVI_HMM, 16},
    {"_SVI_SVI_LDA", (DL_FUNC) &_SVI_SVI_LDA, 7},
    {"_SVI_rcpparma_hello_world", (DL_FUNC) &_SVI_rcpparma_hello_world, 0},
    {"_SVI_rcpparma_outerproduct", (DL_FUNC) &_SVI_rcpparma_outerproduct, 1},
    {"_SVI_rcpparma_innerproduct", (DL_FUNC) &_SVI_rcpparma_innerproduct, 1},
    {"_SVI_rcpparma_bothproducts", (DL_FUNC) &_SVI_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SVI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
